/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export declare namespace ZkLinkPeriphery {
  export type TokenStruct = {
    tokenId: BigNumberish;
    tokenAddress: AddressLike;
    decimals: BigNumberish;
    standard: boolean;
  };

  export type TokenStructOutput = [
    tokenId: bigint,
    tokenAddress: string,
    decimals: bigint,
    standard: boolean
  ] & {
    tokenId: bigint;
    tokenAddress: string;
    decimals: bigint;
    standard: boolean;
  };

  export type ProofInputStruct = {
    recursiveInput: BigNumberish[];
    proof: BigNumberish[];
    commitments: BigNumberish[];
    vkIndexes: BigNumberish[];
    subproofsLimbs: BigNumberish[];
  };

  export type ProofInputStructOutput = [
    recursiveInput: bigint[],
    proof: bigint[],
    commitments: bigint[],
    vkIndexes: bigint[],
    subproofsLimbs: bigint[]
  ] & {
    recursiveInput: bigint[];
    proof: bigint[];
    commitments: bigint[];
    vkIndexes: bigint[];
    subproofsLimbs: bigint[];
  };
}

export declare namespace Storage {
  export type StoredBlockInfoStruct = {
    blockNumber: BigNumberish;
    priorityOperations: BigNumberish;
    pendingOnchainOperationsHash: BytesLike;
    timestamp: BigNumberish;
    stateHash: BytesLike;
    commitment: BytesLike;
    syncHash: BytesLike;
  };

  export type StoredBlockInfoStructOutput = [
    blockNumber: bigint,
    priorityOperations: bigint,
    pendingOnchainOperationsHash: string,
    timestamp: bigint,
    stateHash: string,
    commitment: string,
    syncHash: string
  ] & {
    blockNumber: bigint;
    priorityOperations: bigint;
    pendingOnchainOperationsHash: string;
    timestamp: bigint;
    stateHash: string;
    commitment: string;
    syncHash: string;
  };
}

export interface ZkLinkPeripheryInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "acceptERC20"
      | "acceptETH"
      | "accepts"
      | "activateExodusMode"
      | "addBridge"
      | "addToken"
      | "addTokens"
      | "authFacts"
      | "bridgeIndex"
      | "bridges"
      | "brokerAllowance"
      | "brokerApprove"
      | "cancelOutstandingDepositsForExodusMode"
      | "changeGovernor"
      | "exodusMode"
      | "firstPriorityRequestId"
      | "getPendingBalance"
      | "getSynchronizedProgress"
      | "isBridgeFromEnabled"
      | "isBridgeToEnabled"
      | "networkGovernor"
      | "performExodus"
      | "performedExodus"
      | "periphery"
      | "proveBlocks"
      | "receiveSynchronizationProgress"
      | "revertBlocks"
      | "setAuthPubkeyHash"
      | "setTokenPaused"
      | "setValidator"
      | "syncBlocks"
      | "tokenIds"
      | "tokens"
      | "totalBlocksCommitted"
      | "totalBlocksExecuted"
      | "totalBlocksProven"
      | "totalBlocksSynchronized"
      | "totalCommittedPriorityRequests"
      | "totalOpenPriorityRequests"
      | "transferERC20"
      | "updateBridge"
      | "validators"
      | "verifier"
      | "withdrawPendingBalance"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "Accept"
      | "AddBridge"
      | "BlockCommit"
      | "BlockExecuted"
      | "BlockProven"
      | "BlocksRevert"
      | "BrokerApprove"
      | "ExodusMode"
      | "FactAuth"
      | "FactAuthResetTime"
      | "NewGovernor"
      | "NewPriorityRequest"
      | "NewToken"
      | "TokenPausedUpdate"
      | "UpdateBridge"
      | "ValidatorStatusUpdate"
      | "Withdrawal"
      | "WithdrawalPending"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "acceptERC20",
    values: [
      AddressLike,
      BigNumberish,
      AddressLike,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "acceptETH",
    values: [
      AddressLike,
      BigNumberish,
      AddressLike,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "accepts",
    values: [BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "activateExodusMode",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "addBridge",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "addToken",
    values: [BigNumberish, AddressLike, BigNumberish, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "addTokens",
    values: [ZkLinkPeriphery.TokenStruct[]]
  ): string;
  encodeFunctionData(
    functionFragment: "authFacts",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "bridgeIndex",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "bridges",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "brokerAllowance",
    values: [BigNumberish, AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "brokerApprove",
    values: [BigNumberish, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "cancelOutstandingDepositsForExodusMode",
    values: [BigNumberish, BytesLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "changeGovernor",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "exodusMode",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "firstPriorityRequestId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getPendingBalance",
    values: [BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getSynchronizedProgress",
    values: [Storage.StoredBlockInfoStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "isBridgeFromEnabled",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isBridgeToEnabled",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "networkGovernor",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "performExodus",
    values: [
      Storage.StoredBlockInfoStruct,
      BytesLike,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "performedExodus",
    values: [BigNumberish, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "periphery", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "proveBlocks",
    values: [Storage.StoredBlockInfoStruct[], ZkLinkPeriphery.ProofInputStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "receiveSynchronizationProgress",
    values: [BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "revertBlocks",
    values: [Storage.StoredBlockInfoStruct[]]
  ): string;
  encodeFunctionData(
    functionFragment: "setAuthPubkeyHash",
    values: [BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setTokenPaused",
    values: [BigNumberish, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setValidator",
    values: [AddressLike, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "syncBlocks",
    values: [Storage.StoredBlockInfoStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "tokenIds",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "tokens",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "totalBlocksCommitted",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalBlocksExecuted",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalBlocksProven",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalBlocksSynchronized",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalCommittedPriorityRequests",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalOpenPriorityRequests",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferERC20",
    values: [AddressLike, AddressLike, BigNumberish, BigNumberish, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "updateBridge",
    values: [BigNumberish, boolean, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "validators",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "verifier", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "withdrawPendingBalance",
    values: [AddressLike, BigNumberish, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "acceptERC20",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "acceptETH", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "accepts", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "activateExodusMode",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "addBridge", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "addToken", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "addTokens", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "authFacts", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "bridgeIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "bridges", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "brokerAllowance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "brokerApprove",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "cancelOutstandingDepositsForExodusMode",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "changeGovernor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "exodusMode", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "firstPriorityRequestId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPendingBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSynchronizedProgress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isBridgeFromEnabled",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isBridgeToEnabled",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "networkGovernor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "performExodus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "performedExodus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "periphery", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "proveBlocks",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "receiveSynchronizationProgress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "revertBlocks",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setAuthPubkeyHash",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTokenPaused",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setValidator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "syncBlocks", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "tokenIds", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "tokens", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalBlocksCommitted",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalBlocksExecuted",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalBlocksProven",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalBlocksSynchronized",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalCommittedPriorityRequests",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalOpenPriorityRequests",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferERC20",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateBridge",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "validators", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "verifier", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "withdrawPendingBalance",
    data: BytesLike
  ): Result;
}

export namespace AcceptEvent {
  export type InputTuple = [
    acceptor: AddressLike,
    accountId: BigNumberish,
    receiver: AddressLike,
    tokenId: BigNumberish,
    amount: BigNumberish,
    withdrawFeeRate: BigNumberish,
    accountIdOfNonce: BigNumberish,
    subAccountIdOfNonce: BigNumberish,
    nonce: BigNumberish,
    amountSent: BigNumberish,
    amountReceive: BigNumberish
  ];
  export type OutputTuple = [
    acceptor: string,
    accountId: bigint,
    receiver: string,
    tokenId: bigint,
    amount: bigint,
    withdrawFeeRate: bigint,
    accountIdOfNonce: bigint,
    subAccountIdOfNonce: bigint,
    nonce: bigint,
    amountSent: bigint,
    amountReceive: bigint
  ];
  export interface OutputObject {
    acceptor: string;
    accountId: bigint;
    receiver: string;
    tokenId: bigint;
    amount: bigint;
    withdrawFeeRate: bigint;
    accountIdOfNonce: bigint;
    subAccountIdOfNonce: bigint;
    nonce: bigint;
    amountSent: bigint;
    amountReceive: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace AddBridgeEvent {
  export type InputTuple = [bridge: AddressLike, bridgeIndex: BigNumberish];
  export type OutputTuple = [bridge: string, bridgeIndex: bigint];
  export interface OutputObject {
    bridge: string;
    bridgeIndex: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace BlockCommitEvent {
  export type InputTuple = [blockNumber: BigNumberish];
  export type OutputTuple = [blockNumber: bigint];
  export interface OutputObject {
    blockNumber: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace BlockExecutedEvent {
  export type InputTuple = [blockNumber: BigNumberish];
  export type OutputTuple = [blockNumber: bigint];
  export interface OutputObject {
    blockNumber: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace BlockProvenEvent {
  export type InputTuple = [blockNumber: BigNumberish];
  export type OutputTuple = [blockNumber: bigint];
  export interface OutputObject {
    blockNumber: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace BlocksRevertEvent {
  export type InputTuple = [
    totalBlocksVerified: BigNumberish,
    totalBlocksCommitted: BigNumberish
  ];
  export type OutputTuple = [
    totalBlocksVerified: bigint,
    totalBlocksCommitted: bigint
  ];
  export interface OutputObject {
    totalBlocksVerified: bigint;
    totalBlocksCommitted: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace BrokerApproveEvent {
  export type InputTuple = [
    tokenId: BigNumberish,
    owner: AddressLike,
    spender: AddressLike,
    amount: BigNumberish
  ];
  export type OutputTuple = [
    tokenId: bigint,
    owner: string,
    spender: string,
    amount: bigint
  ];
  export interface OutputObject {
    tokenId: bigint;
    owner: string;
    spender: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ExodusModeEvent {
  export type InputTuple = [];
  export type OutputTuple = [];
  export interface OutputObject {}
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace FactAuthEvent {
  export type InputTuple = [
    sender: AddressLike,
    nonce: BigNumberish,
    fact: BytesLike
  ];
  export type OutputTuple = [sender: string, nonce: bigint, fact: string];
  export interface OutputObject {
    sender: string;
    nonce: bigint;
    fact: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace FactAuthResetTimeEvent {
  export type InputTuple = [
    sender: AddressLike,
    nonce: BigNumberish,
    time: BigNumberish
  ];
  export type OutputTuple = [sender: string, nonce: bigint, time: bigint];
  export interface OutputObject {
    sender: string;
    nonce: bigint;
    time: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace NewGovernorEvent {
  export type InputTuple = [newGovernor: AddressLike];
  export type OutputTuple = [newGovernor: string];
  export interface OutputObject {
    newGovernor: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace NewPriorityRequestEvent {
  export type InputTuple = [
    sender: AddressLike,
    serialId: BigNumberish,
    opType: BigNumberish,
    pubData: BytesLike,
    expirationBlock: BigNumberish
  ];
  export type OutputTuple = [
    sender: string,
    serialId: bigint,
    opType: bigint,
    pubData: string,
    expirationBlock: bigint
  ];
  export interface OutputObject {
    sender: string;
    serialId: bigint;
    opType: bigint;
    pubData: string;
    expirationBlock: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace NewTokenEvent {
  export type InputTuple = [
    tokenId: BigNumberish,
    token: AddressLike,
    decimals: BigNumberish
  ];
  export type OutputTuple = [tokenId: bigint, token: string, decimals: bigint];
  export interface OutputObject {
    tokenId: bigint;
    token: string;
    decimals: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TokenPausedUpdateEvent {
  export type InputTuple = [token: BigNumberish, paused: boolean];
  export type OutputTuple = [token: bigint, paused: boolean];
  export interface OutputObject {
    token: bigint;
    paused: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UpdateBridgeEvent {
  export type InputTuple = [
    bridgeIndex: BigNumberish,
    enableBridgeTo: boolean,
    enableBridgeFrom: boolean
  ];
  export type OutputTuple = [
    bridgeIndex: bigint,
    enableBridgeTo: boolean,
    enableBridgeFrom: boolean
  ];
  export interface OutputObject {
    bridgeIndex: bigint;
    enableBridgeTo: boolean;
    enableBridgeFrom: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ValidatorStatusUpdateEvent {
  export type InputTuple = [validatorAddress: AddressLike, isActive: boolean];
  export type OutputTuple = [validatorAddress: string, isActive: boolean];
  export interface OutputObject {
    validatorAddress: string;
    isActive: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace WithdrawalEvent {
  export type InputTuple = [tokenId: BigNumberish, amount: BigNumberish];
  export type OutputTuple = [tokenId: bigint, amount: bigint];
  export interface OutputObject {
    tokenId: bigint;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace WithdrawalPendingEvent {
  export type InputTuple = [
    tokenId: BigNumberish,
    recepient: BytesLike,
    amount: BigNumberish
  ];
  export type OutputTuple = [
    tokenId: bigint,
    recepient: string,
    amount: bigint
  ];
  export interface OutputObject {
    tokenId: bigint;
    recepient: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface ZkLinkPeriphery extends BaseContract {
  connect(runner?: ContractRunner | null): ZkLinkPeriphery;
  waitForDeployment(): Promise<this>;

  interface: ZkLinkPeripheryInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  acceptERC20: TypedContractMethod<
    [
      acceptor: AddressLike,
      accountId: BigNumberish,
      receiver: AddressLike,
      tokenId: BigNumberish,
      amount: BigNumberish,
      withdrawFeeRate: BigNumberish,
      accountIdOfNonce: BigNumberish,
      subAccountIdOfNonce: BigNumberish,
      nonce: BigNumberish,
      amountTransfer: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  acceptETH: TypedContractMethod<
    [
      acceptor: AddressLike,
      accountId: BigNumberish,
      receiver: AddressLike,
      amount: BigNumberish,
      withdrawFeeRate: BigNumberish,
      accountIdOfNonce: BigNumberish,
      subAccountIdOfNonce: BigNumberish,
      nonce: BigNumberish
    ],
    [void],
    "payable"
  >;

  accepts: TypedContractMethod<
    [arg0: BigNumberish, arg1: BytesLike],
    [string],
    "view"
  >;

  activateExodusMode: TypedContractMethod<[], [void], "nonpayable">;

  addBridge: TypedContractMethod<[bridge: AddressLike], [bigint], "nonpayable">;

  addToken: TypedContractMethod<
    [
      _tokenId: BigNumberish,
      _tokenAddress: AddressLike,
      _decimals: BigNumberish,
      _standard: boolean
    ],
    [void],
    "nonpayable"
  >;

  addTokens: TypedContractMethod<
    [_tokenList: ZkLinkPeriphery.TokenStruct[]],
    [void],
    "nonpayable"
  >;

  authFacts: TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [string],
    "view"
  >;

  bridgeIndex: TypedContractMethod<[arg0: AddressLike], [bigint], "view">;

  bridges: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [string, boolean, boolean] & {
        bridge: string;
        enableBridgeTo: boolean;
        enableBridgeFrom: boolean;
      }
    ],
    "view"
  >;

  brokerAllowance: TypedContractMethod<
    [tokenId: BigNumberish, acceptor: AddressLike, broker: AddressLike],
    [bigint],
    "view"
  >;

  brokerApprove: TypedContractMethod<
    [tokenId: BigNumberish, broker: AddressLike, amount: BigNumberish],
    [boolean],
    "nonpayable"
  >;

  cancelOutstandingDepositsForExodusMode: TypedContractMethod<
    [_n: BigNumberish, _depositsPubdata: BytesLike[]],
    [void],
    "nonpayable"
  >;

  changeGovernor: TypedContractMethod<
    [_newGovernor: AddressLike],
    [void],
    "nonpayable"
  >;

  exodusMode: TypedContractMethod<[], [boolean], "view">;

  firstPriorityRequestId: TypedContractMethod<[], [bigint], "view">;

  getPendingBalance: TypedContractMethod<
    [_address: BytesLike, _tokenId: BigNumberish],
    [bigint],
    "view"
  >;

  getSynchronizedProgress: TypedContractMethod<
    [_block: Storage.StoredBlockInfoStruct],
    [bigint],
    "view"
  >;

  isBridgeFromEnabled: TypedContractMethod<
    [bridge: AddressLike],
    [boolean],
    "view"
  >;

  isBridgeToEnabled: TypedContractMethod<
    [bridge: AddressLike],
    [boolean],
    "view"
  >;

  networkGovernor: TypedContractMethod<[], [string], "view">;

  performExodus: TypedContractMethod<
    [
      _storedBlockInfo: Storage.StoredBlockInfoStruct,
      _owner: BytesLike,
      _accountId: BigNumberish,
      _subAccountId: BigNumberish,
      _withdrawTokenId: BigNumberish,
      _deductTokenId: BigNumberish,
      _amount: BigNumberish,
      _proof: BigNumberish[]
    ],
    [void],
    "nonpayable"
  >;

  performedExodus: TypedContractMethod<
    [
      arg0: BigNumberish,
      arg1: BigNumberish,
      arg2: BigNumberish,
      arg3: BigNumberish
    ],
    [boolean],
    "view"
  >;

  periphery: TypedContractMethod<[], [string], "view">;

  proveBlocks: TypedContractMethod<
    [
      _committedBlocks: Storage.StoredBlockInfoStruct[],
      _proof: ZkLinkPeriphery.ProofInputStruct
    ],
    [void],
    "nonpayable"
  >;

  receiveSynchronizationProgress: TypedContractMethod<
    [syncHash: BytesLike, progress: BigNumberish],
    [void],
    "nonpayable"
  >;

  revertBlocks: TypedContractMethod<
    [_blocksToRevert: Storage.StoredBlockInfoStruct[]],
    [void],
    "nonpayable"
  >;

  setAuthPubkeyHash: TypedContractMethod<
    [_pubkeyHash: BytesLike, _nonce: BigNumberish],
    [void],
    "nonpayable"
  >;

  setTokenPaused: TypedContractMethod<
    [_tokenId: BigNumberish, _tokenPaused: boolean],
    [void],
    "nonpayable"
  >;

  setValidator: TypedContractMethod<
    [_validator: AddressLike, _active: boolean],
    [void],
    "nonpayable"
  >;

  syncBlocks: TypedContractMethod<
    [_block: Storage.StoredBlockInfoStruct],
    [void],
    "nonpayable"
  >;

  tokenIds: TypedContractMethod<[arg0: AddressLike], [bigint], "view">;

  tokens: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [boolean, boolean, string, bigint, boolean] & {
        registered: boolean;
        paused: boolean;
        tokenAddress: string;
        decimals: bigint;
        standard: boolean;
      }
    ],
    "view"
  >;

  totalBlocksCommitted: TypedContractMethod<[], [bigint], "view">;

  totalBlocksExecuted: TypedContractMethod<[], [bigint], "view">;

  totalBlocksProven: TypedContractMethod<[], [bigint], "view">;

  totalBlocksSynchronized: TypedContractMethod<[], [bigint], "view">;

  totalCommittedPriorityRequests: TypedContractMethod<[], [bigint], "view">;

  totalOpenPriorityRequests: TypedContractMethod<[], [bigint], "view">;

  transferERC20: TypedContractMethod<
    [
      _token: AddressLike,
      _to: AddressLike,
      _amount: BigNumberish,
      _maxAmount: BigNumberish,
      _isStandard: boolean
    ],
    [bigint],
    "nonpayable"
  >;

  updateBridge: TypedContractMethod<
    [index: BigNumberish, enableBridgeTo: boolean, enableBridgeFrom: boolean],
    [void],
    "nonpayable"
  >;

  validators: TypedContractMethod<[arg0: AddressLike], [boolean], "view">;

  verifier: TypedContractMethod<[], [string], "view">;

  withdrawPendingBalance: TypedContractMethod<
    [_owner: AddressLike, _tokenId: BigNumberish, _amount: BigNumberish],
    [bigint],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "acceptERC20"
  ): TypedContractMethod<
    [
      acceptor: AddressLike,
      accountId: BigNumberish,
      receiver: AddressLike,
      tokenId: BigNumberish,
      amount: BigNumberish,
      withdrawFeeRate: BigNumberish,
      accountIdOfNonce: BigNumberish,
      subAccountIdOfNonce: BigNumberish,
      nonce: BigNumberish,
      amountTransfer: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "acceptETH"
  ): TypedContractMethod<
    [
      acceptor: AddressLike,
      accountId: BigNumberish,
      receiver: AddressLike,
      amount: BigNumberish,
      withdrawFeeRate: BigNumberish,
      accountIdOfNonce: BigNumberish,
      subAccountIdOfNonce: BigNumberish,
      nonce: BigNumberish
    ],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "accepts"
  ): TypedContractMethod<
    [arg0: BigNumberish, arg1: BytesLike],
    [string],
    "view"
  >;
  getFunction(
    nameOrSignature: "activateExodusMode"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "addBridge"
  ): TypedContractMethod<[bridge: AddressLike], [bigint], "nonpayable">;
  getFunction(
    nameOrSignature: "addToken"
  ): TypedContractMethod<
    [
      _tokenId: BigNumberish,
      _tokenAddress: AddressLike,
      _decimals: BigNumberish,
      _standard: boolean
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "addTokens"
  ): TypedContractMethod<
    [_tokenList: ZkLinkPeriphery.TokenStruct[]],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "authFacts"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [string],
    "view"
  >;
  getFunction(
    nameOrSignature: "bridgeIndex"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "bridges"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [string, boolean, boolean] & {
        bridge: string;
        enableBridgeTo: boolean;
        enableBridgeFrom: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "brokerAllowance"
  ): TypedContractMethod<
    [tokenId: BigNumberish, acceptor: AddressLike, broker: AddressLike],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "brokerApprove"
  ): TypedContractMethod<
    [tokenId: BigNumberish, broker: AddressLike, amount: BigNumberish],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "cancelOutstandingDepositsForExodusMode"
  ): TypedContractMethod<
    [_n: BigNumberish, _depositsPubdata: BytesLike[]],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "changeGovernor"
  ): TypedContractMethod<[_newGovernor: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "exodusMode"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "firstPriorityRequestId"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getPendingBalance"
  ): TypedContractMethod<
    [_address: BytesLike, _tokenId: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "getSynchronizedProgress"
  ): TypedContractMethod<
    [_block: Storage.StoredBlockInfoStruct],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "isBridgeFromEnabled"
  ): TypedContractMethod<[bridge: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "isBridgeToEnabled"
  ): TypedContractMethod<[bridge: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "networkGovernor"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "performExodus"
  ): TypedContractMethod<
    [
      _storedBlockInfo: Storage.StoredBlockInfoStruct,
      _owner: BytesLike,
      _accountId: BigNumberish,
      _subAccountId: BigNumberish,
      _withdrawTokenId: BigNumberish,
      _deductTokenId: BigNumberish,
      _amount: BigNumberish,
      _proof: BigNumberish[]
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "performedExodus"
  ): TypedContractMethod<
    [
      arg0: BigNumberish,
      arg1: BigNumberish,
      arg2: BigNumberish,
      arg3: BigNumberish
    ],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "periphery"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "proveBlocks"
  ): TypedContractMethod<
    [
      _committedBlocks: Storage.StoredBlockInfoStruct[],
      _proof: ZkLinkPeriphery.ProofInputStruct
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "receiveSynchronizationProgress"
  ): TypedContractMethod<
    [syncHash: BytesLike, progress: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "revertBlocks"
  ): TypedContractMethod<
    [_blocksToRevert: Storage.StoredBlockInfoStruct[]],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setAuthPubkeyHash"
  ): TypedContractMethod<
    [_pubkeyHash: BytesLike, _nonce: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setTokenPaused"
  ): TypedContractMethod<
    [_tokenId: BigNumberish, _tokenPaused: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setValidator"
  ): TypedContractMethod<
    [_validator: AddressLike, _active: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "syncBlocks"
  ): TypedContractMethod<
    [_block: Storage.StoredBlockInfoStruct],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "tokenIds"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "tokens"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [boolean, boolean, string, bigint, boolean] & {
        registered: boolean;
        paused: boolean;
        tokenAddress: string;
        decimals: bigint;
        standard: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "totalBlocksCommitted"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "totalBlocksExecuted"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "totalBlocksProven"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "totalBlocksSynchronized"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "totalCommittedPriorityRequests"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "totalOpenPriorityRequests"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "transferERC20"
  ): TypedContractMethod<
    [
      _token: AddressLike,
      _to: AddressLike,
      _amount: BigNumberish,
      _maxAmount: BigNumberish,
      _isStandard: boolean
    ],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "updateBridge"
  ): TypedContractMethod<
    [index: BigNumberish, enableBridgeTo: boolean, enableBridgeFrom: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "validators"
  ): TypedContractMethod<[arg0: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "verifier"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "withdrawPendingBalance"
  ): TypedContractMethod<
    [_owner: AddressLike, _tokenId: BigNumberish, _amount: BigNumberish],
    [bigint],
    "nonpayable"
  >;

  getEvent(
    key: "Accept"
  ): TypedContractEvent<
    AcceptEvent.InputTuple,
    AcceptEvent.OutputTuple,
    AcceptEvent.OutputObject
  >;
  getEvent(
    key: "AddBridge"
  ): TypedContractEvent<
    AddBridgeEvent.InputTuple,
    AddBridgeEvent.OutputTuple,
    AddBridgeEvent.OutputObject
  >;
  getEvent(
    key: "BlockCommit"
  ): TypedContractEvent<
    BlockCommitEvent.InputTuple,
    BlockCommitEvent.OutputTuple,
    BlockCommitEvent.OutputObject
  >;
  getEvent(
    key: "BlockExecuted"
  ): TypedContractEvent<
    BlockExecutedEvent.InputTuple,
    BlockExecutedEvent.OutputTuple,
    BlockExecutedEvent.OutputObject
  >;
  getEvent(
    key: "BlockProven"
  ): TypedContractEvent<
    BlockProvenEvent.InputTuple,
    BlockProvenEvent.OutputTuple,
    BlockProvenEvent.OutputObject
  >;
  getEvent(
    key: "BlocksRevert"
  ): TypedContractEvent<
    BlocksRevertEvent.InputTuple,
    BlocksRevertEvent.OutputTuple,
    BlocksRevertEvent.OutputObject
  >;
  getEvent(
    key: "BrokerApprove"
  ): TypedContractEvent<
    BrokerApproveEvent.InputTuple,
    BrokerApproveEvent.OutputTuple,
    BrokerApproveEvent.OutputObject
  >;
  getEvent(
    key: "ExodusMode"
  ): TypedContractEvent<
    ExodusModeEvent.InputTuple,
    ExodusModeEvent.OutputTuple,
    ExodusModeEvent.OutputObject
  >;
  getEvent(
    key: "FactAuth"
  ): TypedContractEvent<
    FactAuthEvent.InputTuple,
    FactAuthEvent.OutputTuple,
    FactAuthEvent.OutputObject
  >;
  getEvent(
    key: "FactAuthResetTime"
  ): TypedContractEvent<
    FactAuthResetTimeEvent.InputTuple,
    FactAuthResetTimeEvent.OutputTuple,
    FactAuthResetTimeEvent.OutputObject
  >;
  getEvent(
    key: "NewGovernor"
  ): TypedContractEvent<
    NewGovernorEvent.InputTuple,
    NewGovernorEvent.OutputTuple,
    NewGovernorEvent.OutputObject
  >;
  getEvent(
    key: "NewPriorityRequest"
  ): TypedContractEvent<
    NewPriorityRequestEvent.InputTuple,
    NewPriorityRequestEvent.OutputTuple,
    NewPriorityRequestEvent.OutputObject
  >;
  getEvent(
    key: "NewToken"
  ): TypedContractEvent<
    NewTokenEvent.InputTuple,
    NewTokenEvent.OutputTuple,
    NewTokenEvent.OutputObject
  >;
  getEvent(
    key: "TokenPausedUpdate"
  ): TypedContractEvent<
    TokenPausedUpdateEvent.InputTuple,
    TokenPausedUpdateEvent.OutputTuple,
    TokenPausedUpdateEvent.OutputObject
  >;
  getEvent(
    key: "UpdateBridge"
  ): TypedContractEvent<
    UpdateBridgeEvent.InputTuple,
    UpdateBridgeEvent.OutputTuple,
    UpdateBridgeEvent.OutputObject
  >;
  getEvent(
    key: "ValidatorStatusUpdate"
  ): TypedContractEvent<
    ValidatorStatusUpdateEvent.InputTuple,
    ValidatorStatusUpdateEvent.OutputTuple,
    ValidatorStatusUpdateEvent.OutputObject
  >;
  getEvent(
    key: "Withdrawal"
  ): TypedContractEvent<
    WithdrawalEvent.InputTuple,
    WithdrawalEvent.OutputTuple,
    WithdrawalEvent.OutputObject
  >;
  getEvent(
    key: "WithdrawalPending"
  ): TypedContractEvent<
    WithdrawalPendingEvent.InputTuple,
    WithdrawalPendingEvent.OutputTuple,
    WithdrawalPendingEvent.OutputObject
  >;

  filters: {
    "Accept(address,uint32,address,uint16,uint128,uint16,uint32,uint8,uint32,uint128,uint128)": TypedContractEvent<
      AcceptEvent.InputTuple,
      AcceptEvent.OutputTuple,
      AcceptEvent.OutputObject
    >;
    Accept: TypedContractEvent<
      AcceptEvent.InputTuple,
      AcceptEvent.OutputTuple,
      AcceptEvent.OutputObject
    >;

    "AddBridge(address,uint256)": TypedContractEvent<
      AddBridgeEvent.InputTuple,
      AddBridgeEvent.OutputTuple,
      AddBridgeEvent.OutputObject
    >;
    AddBridge: TypedContractEvent<
      AddBridgeEvent.InputTuple,
      AddBridgeEvent.OutputTuple,
      AddBridgeEvent.OutputObject
    >;

    "BlockCommit(uint32)": TypedContractEvent<
      BlockCommitEvent.InputTuple,
      BlockCommitEvent.OutputTuple,
      BlockCommitEvent.OutputObject
    >;
    BlockCommit: TypedContractEvent<
      BlockCommitEvent.InputTuple,
      BlockCommitEvent.OutputTuple,
      BlockCommitEvent.OutputObject
    >;

    "BlockExecuted(uint32)": TypedContractEvent<
      BlockExecutedEvent.InputTuple,
      BlockExecutedEvent.OutputTuple,
      BlockExecutedEvent.OutputObject
    >;
    BlockExecuted: TypedContractEvent<
      BlockExecutedEvent.InputTuple,
      BlockExecutedEvent.OutputTuple,
      BlockExecutedEvent.OutputObject
    >;

    "BlockProven(uint32)": TypedContractEvent<
      BlockProvenEvent.InputTuple,
      BlockProvenEvent.OutputTuple,
      BlockProvenEvent.OutputObject
    >;
    BlockProven: TypedContractEvent<
      BlockProvenEvent.InputTuple,
      BlockProvenEvent.OutputTuple,
      BlockProvenEvent.OutputObject
    >;

    "BlocksRevert(uint32,uint32)": TypedContractEvent<
      BlocksRevertEvent.InputTuple,
      BlocksRevertEvent.OutputTuple,
      BlocksRevertEvent.OutputObject
    >;
    BlocksRevert: TypedContractEvent<
      BlocksRevertEvent.InputTuple,
      BlocksRevertEvent.OutputTuple,
      BlocksRevertEvent.OutputObject
    >;

    "BrokerApprove(uint16,address,address,uint128)": TypedContractEvent<
      BrokerApproveEvent.InputTuple,
      BrokerApproveEvent.OutputTuple,
      BrokerApproveEvent.OutputObject
    >;
    BrokerApprove: TypedContractEvent<
      BrokerApproveEvent.InputTuple,
      BrokerApproveEvent.OutputTuple,
      BrokerApproveEvent.OutputObject
    >;

    "ExodusMode()": TypedContractEvent<
      ExodusModeEvent.InputTuple,
      ExodusModeEvent.OutputTuple,
      ExodusModeEvent.OutputObject
    >;
    ExodusMode: TypedContractEvent<
      ExodusModeEvent.InputTuple,
      ExodusModeEvent.OutputTuple,
      ExodusModeEvent.OutputObject
    >;

    "FactAuth(address,uint32,bytes)": TypedContractEvent<
      FactAuthEvent.InputTuple,
      FactAuthEvent.OutputTuple,
      FactAuthEvent.OutputObject
    >;
    FactAuth: TypedContractEvent<
      FactAuthEvent.InputTuple,
      FactAuthEvent.OutputTuple,
      FactAuthEvent.OutputObject
    >;

    "FactAuthResetTime(address,uint32,uint256)": TypedContractEvent<
      FactAuthResetTimeEvent.InputTuple,
      FactAuthResetTimeEvent.OutputTuple,
      FactAuthResetTimeEvent.OutputObject
    >;
    FactAuthResetTime: TypedContractEvent<
      FactAuthResetTimeEvent.InputTuple,
      FactAuthResetTimeEvent.OutputTuple,
      FactAuthResetTimeEvent.OutputObject
    >;

    "NewGovernor(address)": TypedContractEvent<
      NewGovernorEvent.InputTuple,
      NewGovernorEvent.OutputTuple,
      NewGovernorEvent.OutputObject
    >;
    NewGovernor: TypedContractEvent<
      NewGovernorEvent.InputTuple,
      NewGovernorEvent.OutputTuple,
      NewGovernorEvent.OutputObject
    >;

    "NewPriorityRequest(address,uint64,uint8,bytes,uint256)": TypedContractEvent<
      NewPriorityRequestEvent.InputTuple,
      NewPriorityRequestEvent.OutputTuple,
      NewPriorityRequestEvent.OutputObject
    >;
    NewPriorityRequest: TypedContractEvent<
      NewPriorityRequestEvent.InputTuple,
      NewPriorityRequestEvent.OutputTuple,
      NewPriorityRequestEvent.OutputObject
    >;

    "NewToken(uint16,address,uint8)": TypedContractEvent<
      NewTokenEvent.InputTuple,
      NewTokenEvent.OutputTuple,
      NewTokenEvent.OutputObject
    >;
    NewToken: TypedContractEvent<
      NewTokenEvent.InputTuple,
      NewTokenEvent.OutputTuple,
      NewTokenEvent.OutputObject
    >;

    "TokenPausedUpdate(uint16,bool)": TypedContractEvent<
      TokenPausedUpdateEvent.InputTuple,
      TokenPausedUpdateEvent.OutputTuple,
      TokenPausedUpdateEvent.OutputObject
    >;
    TokenPausedUpdate: TypedContractEvent<
      TokenPausedUpdateEvent.InputTuple,
      TokenPausedUpdateEvent.OutputTuple,
      TokenPausedUpdateEvent.OutputObject
    >;

    "UpdateBridge(uint256,bool,bool)": TypedContractEvent<
      UpdateBridgeEvent.InputTuple,
      UpdateBridgeEvent.OutputTuple,
      UpdateBridgeEvent.OutputObject
    >;
    UpdateBridge: TypedContractEvent<
      UpdateBridgeEvent.InputTuple,
      UpdateBridgeEvent.OutputTuple,
      UpdateBridgeEvent.OutputObject
    >;

    "ValidatorStatusUpdate(address,bool)": TypedContractEvent<
      ValidatorStatusUpdateEvent.InputTuple,
      ValidatorStatusUpdateEvent.OutputTuple,
      ValidatorStatusUpdateEvent.OutputObject
    >;
    ValidatorStatusUpdate: TypedContractEvent<
      ValidatorStatusUpdateEvent.InputTuple,
      ValidatorStatusUpdateEvent.OutputTuple,
      ValidatorStatusUpdateEvent.OutputObject
    >;

    "Withdrawal(uint16,uint128)": TypedContractEvent<
      WithdrawalEvent.InputTuple,
      WithdrawalEvent.OutputTuple,
      WithdrawalEvent.OutputObject
    >;
    Withdrawal: TypedContractEvent<
      WithdrawalEvent.InputTuple,
      WithdrawalEvent.OutputTuple,
      WithdrawalEvent.OutputObject
    >;

    "WithdrawalPending(uint16,bytes32,uint128)": TypedContractEvent<
      WithdrawalPendingEvent.InputTuple,
      WithdrawalPendingEvent.OutputTuple,
      WithdrawalPendingEvent.OutputObject
    >;
    WithdrawalPending: TypedContractEvent<
      WithdrawalPendingEvent.InputTuple,
      WithdrawalPendingEvent.OutputTuple,
      WithdrawalPendingEvent.OutputObject
    >;
  };
}
